#!/bin/bash
set -e
set -u

platform="${1}"
system="${platform}"
if [[ "${system}" == "work" ]]; then
    system="darwin"
fi

tmp="${TMPDIR:-/tmp}"
name="dev_env"
dir="${HOME}/Programming/${name}"
output="${tmp}/${name}_setup"
apt_args="--no-install-recommends --yes"

cyan="$(tput setaf 6)"
red="$(tput setaf 1)"
yellow="$(tput setaf 3)"
green="$(tput setaf 2)"

function message {
    echo "${*}$(tput sgr0)"
    echo "${*:2}" 1>>"${output}" 2>&1
}

function step {
    if [[ "${1}" == "no_redirect" ]]; then
        message $cyan "==> ${2}"
        ${*:3}
    else
        message $cyan "==> ${1}"
        ${*:2} 1>>"${output}" 2>&1
    fi

    message $green "--> Done"
}

if [[ "${platform}" != "darwin" ]] && [[ "${platform}" != "work" ]]; then
    message $red "Unknown platform given. Valid platforms are darwin, and work"
    rm "${output}"
    exit 1
fi

message $yellow "!!! Detailed command output is being written to ${output}"

function base_step {
    curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | NONINTERACTIVE=1 bash

    local brewdir="/usr/local"
    if [[ "$(uname -m)" == "arm64" ]]; then
        brewdir="/opt/homebrew"
    fi
    eval "$("${brewdir}"/bin/brew shellenv)"

    brew analytics off
    brew tap homebrew/cask-versions
    brew tap homebrew/cask-fonts

    brew install git
}
step "Installing base requirements" base_step

function clone_step {
    git clone "git@github.com:larzconwell/${name}.git" "${dir}"
}
step "Cloning ${name}" clone_step

function link_step {
    "${dir}/scripts/link_files" "${dir}/dotfiles" "${HOME}" "."
}
step "Linking dotfiles" link_step

function fonts_step {
    brew install --cask --fontdir=/Library/Fonts font-maple-mono
}
step "Installing fonts" fonts_step

function packages_step {
    brew install --cask firefox kitty rectangle keepingyouawake
    brew install \
        docker docker-compose colima \
        gdb shellcheck cmake clang-format nasm \
        wget curl openssh openssl ack p7zip tree \
        jq graphviz imagemagick helix zsh pv go just \
        golangci-lint elixir elixir-ls

    if [[ "${platform}" == "work" ]]; then
        brew tap movableink/formulas

        brew install --cask \
            google-chrome postgres 1password \
            zoom slack keybase tuple

        brew install \
            redis python icu4c libxslt geoip awscli prometheus \
            movableink/formulas/qt movableink/formulas/qtwebkit \
            movableink/formulas/apache-pulsar

        curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
        source "${HOME}/.nvm/nvm.sh"

        nvm install 16
        nvm alias default 16

        set +u
        curl -fsSL https://get.rvm.io | bash -s - stable --ignore-dotfiles
        source "${HOME}/.rvm/scripts/rvm"

        rvm install 2.7
        rvm --default use 2.7
        set -u

        npm install -g typescript-language-server typescript

        gem install lunchy
    fi

    echo "$(brew --prefix)/bin/zsh" | sudo tee -a /etc/shells 1>/dev/null 2>&1

    mkdir -p "${HOME}/.docker/cli-plugins"
    ln -sfn "$(brew --prefix)/opt/docker-compose/bin/docker-compose" "${HOME}/.docker/cli-plugins/docker-compose"

    export PATH="${HOME}/.cargo/bin:${PATH}"
    curl -fsSL https://sh.rustup.rs | sh -s - -y --no-modify-path
    rustup component add rust-analyzer

    go_pkgs=(
        "github.com/google/gops@latest"
        "golang.org/x/tools/cmd/goimports@latest"
        "golang.org/x/tools/gopls@latest"
        "github.com/go-delve/delve/cmd/dlv@latest"
        "github.com/nametake/golangci-lint-langserver@latest"
    )
    for pkg in ${go_pkgs[@]}; do
        go install "${pkg}"
    done
}
step "Installing packages" packages_step

function shell_step {
    chsh -s "$(which zsh)"
    sudo chsh -s "$(which zsh)"
}
step no_redirect "Configuring default shell" shell_step

function root_passwd_step {
    sudo passwd
}
step no_redirect "Configuring root password" root_passwd_step

message $green "==> Setup complete, a restart is advised"
message $green "==> Additional manual steps should be taken:"
message $green "-->   Remove NVM changes made in ${HOME}/.zshrc"
